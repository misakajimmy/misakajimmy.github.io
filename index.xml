<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MisakaJimmy Blog</title>
    <link>https://misakaJimmy.github.io/</link>
    <description>Recent content on MisakaJimmy Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://misakaJimmy.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PostgreSQL Docker 启动</title>
      <link>https://misakaJimmy.github.io/docs/database/postgresql/postgresql-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://misakaJimmy.github.io/docs/database/postgresql/postgresql-docker/</guid>
      <description>1docker pull bitnami/postgresql:12 docker-compose 1version:&amp;#39;3.5&amp;#39;23services:4postgres:5container_name:postgres_container6image:postgres7environment:8POSTGRES_USER:postgres9POSTGRES_PASSWORD:password10PGDATA:/data/postgres11volumes:12- postgres:/data/postgres13ports:14- &amp;#34;5432:5432&amp;#34;15networks:16- postgres17restart:unless-stopped1819pgadmin:20container_name:pgadmin_container21image:dpage/pgadmin422environment:23PGADMIN_DEFAULT_EMAIL:misakajimmy@gmail.com24PGADMIN_DEFAULT_PASSWORD:admin25PGADMIN_CONFIG_SERVER_MODE:&amp;#39;False&amp;#39;26volumes:27- pgadmin:/root/.pgadmin2829ports:30- &amp;#34;3080:80&amp;#34;31networks:32- postgres33restart:unless-stopped3435networks:36postgres:37driver:bridge3839volumes:40postgres:41pgadmin:</description>
    </item>
    
    <item>
      <title>Windows PostgreSQL 使用</title>
      <link>https://misakaJimmy.github.io/docs/database/postgresql/windows-postgresql-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://misakaJimmy.github.io/docs/database/postgresql/windows-postgresql-usage/</guid>
      <description>直接官网下载安装，安装时记得记下安装路径。
根目录如下图所示，bin下是 PostgreSQL 的命令行控制程序，pgAdmin4 下是 PostpreSQL 的可视化管理程序。
添加 bin 到环境变量之中 记下到 bin 文件夹的绝对路径， 我这里是 D:\Program Files\PostgreSQL\12\bin ，添加到系统变量和用户变量的 Path 之中。
然后打开 Terminal ，输入
1pg_ctl.exe start -D &amp;#34;D:\Program Files\PostgreSQL\12\data&amp;#34; 然后打开 pgAdmin ， 输入 host 和 Password 。
角色 &amp;quot;postgres&amp;quot; 不存在 Terminal 中出现角色不存在，导致无法正常连接到postgre服务。
使用管理员权限打开 Powershell ， 输入
1 pg_ctl.exe register -N &amp;#34;pgsql&amp;#34; -D &amp;#34;D:\Program Files\PostgreSQL\12\data&amp;#34; 将 postgresql 注册为服务</description>
    </item>
    
    <item>
      <title>项目中引入 InversifyJS</title>
      <link>https://misakaJimmy.github.io/docs/frontend/inversifyjs/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://misakaJimmy.github.io/docs/frontend/inversifyjs/install/</guid>
      <description>安装 可以通过 npm 或者 yarn 来引入 InversifyJS：
1yarn add inversify reflect-metadata InversifyJS 类型定义包含在 inversify npm 包中。InversifyJS 需要 experimentalDecorators、 emitDecoratorMetadata 和 lib 编译选项开启在 tsconfig.json 文件中。1{ 2 &amp;#34;compilerOptions&amp;#34;: { 3 &amp;#34;experimentalDecorators&amp;#34;: true, 4 &amp;#34;emitDecoratorMetadata&amp;#34;: true 5 } 6} InversifyJS 需要一个支持下面特性的现代 JavaScript 引擎：
 Reflect metadata Promise (仅在使用 provider injection 时需要) Proxy (仅在使用 activation handlers 时需要)  如果你的环境不支持其中的特性，那么需要引入 shim 或者 polyfill。
环境支持和 polyfills InversifyJS 需要一个现代的 JavaScript 引擎，需要支持 Promise、 Map、 Metadata Reflection API 和 Proxy 对象。 如果你的环境不支持这些的化，就需要引入 shim 或者 polyfill。</description>
    </item>
    
    <item>
      <title>About CUDA</title>
      <link>https://misakaJimmy.github.io/docs/ops/about-cuda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://misakaJimmy.github.io/docs/ops/about-cuda/</guid>
      <description>查看 CUDA 版本  查看文件  查看 CUDA 安装目录下的 vesrion.txt
通过 nvcc  1nvcc --version </description>
    </item>
    
    <item>
      <title>InversifyJS 基础演示(TS)</title>
      <link>https://misakaJimmy.github.io/docs/frontend/inversifyjs/base-ts-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://misakaJimmy.github.io/docs/frontend/inversifyjs/base-ts-example/</guid>
      <description>代码解析 1import * as inversify from &amp;#39;inversify&amp;#39;; 2import &amp;#39;reflect-metadata&amp;#39;; 引入 inversify 以及 reflect-metadata 两个包。
1const TYPES = { 2 // 忍者 3 Ninja: &amp;#39;Ninja&amp;#39;, 4 // 武士刀 5 Katana: &amp;#39;Katana&amp;#39;, 6 // 手里剑 7 Shuriken: &amp;#39;Shuriken&amp;#39; 8} 定义了类对应的映射，这里定义了三个类，看过火影的应该很容易理解Ninja(忍者)、Katana(武士刀)和Shuriken(手里剑)之间的关系。
1class Katana { 2 hit() { 3 return &amp;#39;cut!&amp;#39;; 4 } 5} 6 7class Shuriken { 8 throw() { 9 return &amp;#39;hit!&amp;#39;; 10 } 11} 12 13class Ninja { 14 private _katana: Katana; 15 private _shuriken: Shuriken; 16 17 constructor(katana: Katana, shuriken: Shuriken) { 18 this.</description>
    </item>
    
    <item>
      <title>Yarn</title>
      <link>https://misakaJimmy.github.io/docs/frontend/tools/yarn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://misakaJimmy.github.io/docs/frontend/tools/yarn/</guid>
      <description>安装yarn 下载 nodejs 通过 npm 安装 1npm install -g yarn 查看版本 1yarn --version 设置淘宝源 1yarn config set registry https://registry.npm.taobao.org 2yarn config set sass_binary_site https://npm.taobao.org/mirrors/node-sass # node-sass 二进制包镜像 3yarn config set electron_mirror https://npm.taobao.org/mirrors/electron/ # electron 二进制包镜像 4yarn config set ELECTRON_MIRROR https://cdn.npm.taobao.org/dist/electron/ # electron 二进制包镜像 5yarn config set puppeteer_download_host https://npm.taobao.org/mirrors # puppeteer 二进制包镜像 6yarn config set chromedriver_cdnurl https://npm.taobao.org/mirrors/chromedriver # chromedriver 二进制包镜像 7yarn config set operadriver_cdnurl https://npm.taobao.org/mirrors/operadriver # operadriver 二进制包镜像 8yarn config set phantomjs_cdnurl https://npm.</description>
    </item>
    
    <item>
      <title>About GPU</title>
      <link>https://misakaJimmy.github.io/docs/ops/about-gpu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://misakaJimmy.github.io/docs/ops/about-gpu/</guid>
      <description>关于显卡驱动 查看显卡型号和驱动版本 查看显卡型号 1lspci | grep -i nvidia 查看驱动版本 1sudo dpkg --list | grep nvidia-* 查看正在使用的显卡驱动所使用的内核版本 1cat /proc/driver/nvidia/version </description>
    </item>
    
    <item>
      <title>Lerna</title>
      <link>https://misakaJimmy.github.io/docs/frontend/tools/lerna/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://misakaJimmy.github.io/docs/frontend/tools/lerna/</guid>
      <description>项目链接：github.com/lerna/lernaLerna 是一个管理工具，用于管理包含多个软件包（package）的 JavaScript 项目。
关于 将大型代码仓库分割成多个独立版本化的 软件包（package）对于代码共享来说非常有用。但是，如果某些更改 跨越了多个代码仓库的话将变得很 麻烦 并且难以跟踪，并且， 跨越多个代码仓库的测试将迅速变得非常复杂。
为了解决这些（以及许多其它）问题，某些项目会将 代码仓库分割成多个软件包（package），并将每个软件包存放到独立的代码仓库中。但是，例如 Babel, React, Angular, Ember, Meteor, Jest, 等项目以及许多其他项目则是在 一个代码仓库中包含了多个软件包（package）并进行开发。
Lerna is a tool that optimizes the workflow around managing multi-package repositories with git and npm.
Lerna 还可以减少开发和构建环境中大量包副本的时间和空间需求——这通常是将项目分成许多单独的 NPM 包的缺点。有关详细信息，请参阅 hoist documentation。
Lerna repo 是什么样的？ 它实际上很简单。您的文件结构如下所示：
1my-lerna-repo/ 2 package.json 3 packages/ 4 package-1/ 5 package.json 6 package-2/ 7 package.json Lerna 能做什么？ Lerna 中的两个主要命令是 lerna bootstrap 和 lerna publish。</description>
    </item>
    
    <item>
      <title>对类的支持</title>
      <link>https://misakaJimmy.github.io/docs/frontend/inversifyjs/classes-as-id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://misakaJimmy.github.io/docs/frontend/inversifyjs/classes-as-id/</guid>
      <description>对类的支持 InversifyJS 允许类对其他类的直接依赖。这样做时，您需要使用装饰器 @injectable，但不需要使用装饰器 @inject。
使用类作为服务标识时不需要 @inject 装饰器。因为编译器能为我们生成的元数据。但是别忘记下面的配置：
 导入 reflect-metadata 在 tsconfig.json 文件中设置 emitDecoratorMetadata 为 true  1import { Container, injectable, inject } from &amp;#34;inversify&amp;#34;; 2 3@injectable() 4class Katana { 5 public hit() { 6 return &amp;#34;cut!&amp;#34;; 7 } 8} 9 10@injectable() 11class Shuriken { 12 public throw() { 13 return &amp;#34;hit!&amp;#34;; 14 } 15} 16 17@injectable() 18class Ninja implements Ninja { 19 20 private _katana: Katana; 21 private _shuriken: Shuriken; 22 23 public constructor(katana: Katana, shuriken: Shuriken) { 24 this.</description>
    </item>
    
    <item>
      <title>Nvidia smi</title>
      <link>https://misakaJimmy.github.io/docs/ops/nvidia-smi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://misakaJimmy.github.io/docs/ops/nvidia-smi/</guid>
      <description>nvidia-smi mig 此章节源自于 nvidia-smi mig --help，在此基础上进行汉化批注以及添加示例。mig -- Multi Instance GPU management.
多实例 GPU 管理。
Usage:
1nvidia-smi mig - [options] Options include:
 [-h | --help]:  Display help information.
显示帮助信息
 [-i | --id]:  枚举索引、PCI 总线 ID 或 UUID。当拥有多个设备时，使用逗号分隔。
 [-gi | --gpu-instance-id]:  GPU 实例 ID。当拥有多个 GPU 实例时，使用逗号分隔。
 [-ci | --compute-instance-id]:  计算实例 ID。当拥有多个计算实例时使用逗号分隔。
 [-lgip | --list-gpu-instance-profiles]:  列出支持的 GPU 实例配置文件。使用 -i 可以将此命令重定向到特定的 GPU。</description>
    </item>
    
    <item>
      <title>Symbol</title>
      <link>https://misakaJimmy.github.io/docs/frontend/basic/symbol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://misakaJimmy.github.io/docs/frontend/basic/symbol/</guid>
      <description>Symbol 原文链接：developer.mozilla.orgsymbol 是一种基本数据类型 （primitive data type）。Symbol()函数会返回symbol类型的值，该类型具有静态属性和静态方法。它的静态属性会暴露几个内建的成员对象；它的静态方法会暴露全局的symbol注册，且类似于内建对象类，但作为构造函数来说它并不完整，因为它不支持语法：&amp;quot;new Symbol()&amp;quot;。
语法 1Symbol([description]) 参数  description 可选  可选的，字符串类型。对symbol的描述，可用于调试但不是访问symbol本身。
描述 直接使用Symbol()创建新的symbol类型，并用一个可选的字符串作为其描述。
1var sym1 = Symbol(); 2var sym2 = Symbol(&amp;#39;foo&amp;#39;); 3var sym3 = Symbol(&amp;#39;foo&amp;#39;); 上面的代码创建了三个新的symbol类型。 注意，Symbol(&amp;quot;foo&amp;quot;) 不会强制将字符串 “foo” 转换成symbol类型。它每次都会创建一个新的 symbol类型：
1Symbol(&amp;#34;foo&amp;#34;) === Symbol(&amp;#34;foo&amp;#34;); // false 下面带有 new 运算符的语法将抛出 TypeError 错误：
1var sym = new Symbol(); // TypeError 这会阻止创建一个显式的 Symbol 包装器对象而不是一个 Symbol 值。围绕原始数据类型创建一个显式包装器对象从 ECMAScript 6 开始不再被支持。 然而，现有的原始包装器对象，如 new Boolean、new String以及new Number，因为遗留原因仍可被创建。
如果你真的想创建一个 Symbol 包装器对象 (Symbol wrapper object)，你可以使用 Object() 函数：</description>
    </item>
    
    <item>
      <title>HGX A100 8-GPU install</title>
      <link>https://misakaJimmy.github.io/docs/ops/hgx_a100_8-gpu_install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://misakaJimmy.github.io/docs/ops/hgx_a100_8-gpu_install/</guid>
      <description>安装 CUDA 没啥好说的，按照这份文档里面的代码直接跑就行了，因为里面一些链接可能会变动，这里就不再写一遍了。特别注意的的是，在第五步 sudo apt-get -y install cuda-drivers 时，建议加上 --no-install-recommends ，这样可以避免安装图形化界面。
安装 Fabric Manager 参考文档简介 NVIDIA DGX™ A100 和 NVIDIA HGX™ A100 8-GPU 服务器系统使用 NVIDIA® NVLink® 交换机 (NVIDIA® NVSwitch™)，可通过 NVLink 结构实现全对全通信。DGX A100 和 HGX A100 8-GPU 系统均由一个 GPU 基板、八个 NVIDIA A100 GPU 和六个 NVSwitch 组成。每个 A100 GPU 都有两个 NVLink 连接到同一 GPU 基板上的每个 NVSwitch。此外，可以将两个 GPU 基板连接在一起以构建一个 16 GPU 系统。在两个 GPU 基板之间，唯一的 NVLink 连接在 NVSwitch 之间，每个交换机从一个 GPU 基板连接到另一个 GPU 基板上的单个 NVSwitch，总共有 16 个 NVLink 连接。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://misakaJimmy.github.io/docs/linux/docker/install-docker-compose-v2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://misakaJimmy.github.io/docs/linux/docker/install-docker-compose-v2/</guid>
      <description>install docker-compose v2 官方 github
1wget https://github.com/docker/compose-cli/releases/download/v2.0.0-beta.6/docker-compose-linux-amd64 2sudo chmod a+x ./docker-compose-linux-amd64 3mkdir ~/.docker/cli-plugins 4sudo mv ./docker-compose-linux-amd64 ~/.docker/cli-plugins/docker-compose </description>
    </item>
    
  </channel>
</rss>
